group 'in.woowa.blog'
version '1.0.0-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

def entityProjects = [project(':blog-commons'),
                      project(':blog-service')]

ext {
    slf4jVersion = '1.7.21'
    queryDslVersion='4.1.2'
    javaVersion = '1.8'
    hibernatePersistenceApiVersion='1.0.0.Final'
    swaggerVersion = '2.6.0'
    swaggerAnnotationVersion = '1.5.10'
    mysqlDatabase = '5.1.35'
    awsSdkVersion = '1.11.126'
    poiVersion = '3.12'
    baeminModulesVersion = '0.2.0.BUILD-SNAPSHOT'
    logBackVersion = '1.1.7'
    modelMapperVersion = '0.7.6'
    lombokVersion = '1.16.16'
    poiVersion = '3.16'
    hibernateValidatorVersion = '5.4.1.Final'
    jedisVersion = '2.9.0'
    springSessionDataRedisVersion = '1.3.1.RELEASE'
    springDataRedisVersion = '1.8.3.RELEASE'
    httpClientVersion = '4.5.3'
    ultraqThymeleafeVersion= '1.3.3'
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

repositories {
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://nexus.woowa.in/content/groups/public" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.7"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.0.RC2"
    }

}

configure(entityProjects) {
    apply plugin: 'java'

    description = "blog entity project"

    dependencies {
        compile('org.springframework.data:spring-data-jpa')
        compile("com.querydsl:querydsl-apt:$queryDslVersion")
        compile "com.querydsl:querydsl-jpa:$queryDslVersion"
        runtime('com.h2database:h2')
        compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
        compile("org.hibernate.javax.persistence:hibernate-jpa-2.1-api:${hibernatePersistenceApiVersion}")
        compile("com.fasterxml.jackson.core:jackson-databind")
        compile("org.projectlombok:lombok:$lombokVersion")
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    def querydslSrcDir = 'src/main/generated'

    apply plugin: "com.ewerk.gradle.plugins.querydsl"

    querydsl {
        library = "com.querydsl:querydsl-apt"
        jpa = true
        querydslSourcesDir = querydslSrcDir
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', querydslSrcDir]
            }
            resources {
                srcDirs = ['src/maiin/resources']
            }
        }
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR5"
            mavenBom 'com.amazonaws:aws-java-sdk-bom:1.10.47'
        }
    }

    targetCompatibility = javaVersion
    sourceCompatibility = javaVersion
    compileJava.options.encoding = 'UTF-8'

    dependencies {
        compile("org.projectlombok:lombok:$lombokVersion")

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile 'com.jayway.jsonpath:json-path:2.0.0'

//        integrationTestCompile('org.assertj:assertj-core:3.4.1')
    }

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging' // replaced with jcl-over-slf4j
        all*.exclude group: 'log4j', module: 'log4j' // replaced with log4j-over-slf4j

        all*.exclude module: 'hsqldb'
        all*.exclude module: 'slf4j-log4j12'

        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }


    //spring boot project info
    processResources {
        filesMatching('application.yml') {
            expand(project.properties)
        }
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test
}

project('blog-commons') {
    description="This project include utils class that used by other projects."
    bootRepackage.enabled = false

    dependencies {
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-validation')
        compile('com.h2database:h2')
        compile("org.projectlombok:lombok:$lombokVersion")
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }
}

project('blog-service') {
    description = "blog service"
    bootRepackage.enabled = false

    dependencies {
        compile project(':blog-commons')
        compile("org.modelmapper:modelmapper:$modelMapperVersion")
        compile('org.springframework.boot:spring-boot-starter-data-jpa')
        compile('org.springframework.boot:spring-boot-starter-validation')
        compile("org.projectlombok:lombok:$lombokVersion")
        compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
        compile 'com.amazonaws:aws-java-sdk-s3'
        compile 'com.amazonaws:aws-java-sdk-kinesis'

        testCompile("mysql:mysql-connector-java:$mysqlDatabase")
    }

}

project('blog-api') {
    description = "blog api server"
    bootRepackage.enabled = false
    apply plugin: 'war'

    war {
        from('src/main/ebextensions') {
            into('.ebextensions')
        }
    }

    dependencies {
        compile project(':blog-service')

        compile('org.springframework.boot:spring-boot-starter-thymeleaf')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-tomcat')
        compile("net.sourceforge.nekohtml:nekohtml:1.9.15")
        compile('org.springframework.boot:spring-boot-devtools')

        compile('com.amazonaws:aws-java-sdk:1.9.37')
        compile("io.swagger:swagger-annotations:$swaggerAnnotationVersion")


        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}


